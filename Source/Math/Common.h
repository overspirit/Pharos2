#pragma once

//e
#if !defined(M_E)
#define M_E        2.71828182845904523536
#endif

//log2(e)
#if !defined(LOG2E)
#define LOG2E    1.44269504088896340736
#endif

//log10(e)
#if !defined(LOG10E)
#define LOG10E   0.434294481903251827651
#endif

//ln(2)
#if !defined(LN2)
#define LN2      0.693147180559945309417
#endif

//ln(10)
#if !defined(LN10)
#define LN10     2.30258509299404568402
#endif

//pi
#if !defined(PI)
#define PI       3.14159265358979323846
#endif

//角度转弧度
#if !defined(DEGTORAD)
#define DEGTORAD (PI / 180.0)
#endif

//弧度转角度
#if !defined(RADTODEG)
#define RADTODEG (180.0 / PI)
#endif

//sqrt(2)
#if !defined(SQRT2)
#define SQRT2    1.41421356237309504880
#endif

//1/sqrt(2)
#if !defined(SQRT1_2)
#define SQRT1_2  0.707106781186547524401
#endif

//sqrt(3)
#if !defined(SQRT3)
#define SQRT3	 1.732050807568877293527
#endif

namespace Pharos
{
	namespace Math
	{
		//取最小值
		template<typename T>
		REALINLINE T maximum(T a, T b)
		{
			return ((a) > (b) ? (a) : (b));
		}

		//取最大值
		template<typename T>
		REALINLINE T minimum(T a, T b)
		{
			return ((a) < (b) ? (a) : (b));
		}

		//将给定值限制在最小值和最大值之间
		template<typename T>
		REALINLINE T clamp(T value, T min_value, T max_value)
		{
			return (minimum(maximum(value, min_value), max_value));
		}

		// 求绝对值
		template <typename T>
		REALINLINE T abs(T x)
		{
			return x < T(0) ? -x : x;
		}

		// 取符号
		template <typename T>
		REALINLINE T sgn(T x)
		{
			return x < T(0) ? T(-1) : (x > T(0) ? T(1) : T(0));
		}

		//按照四舍五入返回指定表达式的最小整数
		template<typename T>
		REALINLINE float64 round(T x)
		{
			return (float64)floor(x + 0.5);
		}

		//取浮点数的尾数部分
		template<typename T>
		REALINLINE T fract(T x)
		{
			return (T)(x - ((int64)x));
		}

		//随机数
		//////////////////////////////////////////////////////////////////////////
		struct srand_init{ srand_init(){ srand((uint32)clock()); } };
		
		REALINLINE int32 random(int32 nMin = 0, int32 nMax = RAND_MAX - 1)
		{
			static srand_init init;
			int32 nDiff = nMax - nMin + 1;
			return nMin + (rand() % nDiff);
		}

		REALINLINE float32 random(float32 fMin = 0, float32 fMax = 1.0f)
		{
			static srand_init init;
			float32 fUnit = ((float32)rand()) / RAND_MAX;
			float32 fDiff = fMax - fMin;
			return fMin + fUnit * fDiff;
		}
		//////////////////////////////////////////////////////////////////////////
		
		//检测给定数是不是2的整数次方
		REALINLINE bool is_power_Of_2(uint32 n)
		{
			return ((n&(n - 1)) == 0);
		}

		//返回一个最大的小于给定数值的2的整数倍的数值
		REALINLINE uint32 floor_power_2(int32 x)
		{
			return ((uint32)pow(2.0, (float64)(int32)floor((log((float64)x) / log(2.0)))));
		}

		REALINLINE uint64 floor_power_2(int64 x)
		{
			return ((uint64)pow(2.0, (float64)(int32)floor((log((float64)x) / log(2.0)))));
		}

		//返回一个最小的大于给定数值的2的整数倍的数值
		REALINLINE uint32 ceil_power_2(int32 x)
		{
			return ((uint32)pow(2.0, (float64)(int32)ceil((log((float64)x) / log(2.0)))));
		}

		REALINLINE uint64 ceil_power_2(int64 x)
		{
			return ((uint64)pow(2.0, (float64)(int32)ceil((log((float64)x) / log(2.0)))));
		}

		//对两个浮点数余弦插值
		REALINLINE float32 lerp_cos(float32 a, float32 b, float32 x)
		{
			x = (float32)(1 - cos(x * PI)) * 0.5f;
			return (a * (1 - x) + b * x);
		}

		//对两个浮点数线性插值
		REALINLINE float32 lerp(float32 a, float32 b, float32 x)
		{
			return (a * (1 - x) + b * x);
		}
		
		//定义浮点数的比较常数
		const static float32 ROUNDING_ERROR_f32 = 0.000001f;
		const static float64 ROUNDING_ERROR_f64 = 0.00000001;

		//比较两个数是否相等
		//////////////////////////////////////////////////////////////////////////
		//! returns if a equals b, taking possible rounding errors into account
		inline bool equals(const float64 a, const float64 b, const float64 tolerance = ROUNDING_ERROR_f64)
		{
			return (a + tolerance >= b) && (a - tolerance <= b);
		}

		//! returns if a equals b, taking possible rounding errors into account
		inline bool equals(const float32 a, const float32 b, const float32 tolerance = ROUNDING_ERROR_f32)
		{
			return (a + tolerance >= b) && (a - tolerance <= b);
		}
		//////////////////////////////////////////////////////////////////////////

		//检查数字是否为0
		//////////////////////////////////////////////////////////////////////////
		//! returns if a equals zero, taking rounding errors into account
		inline bool iszero(const float64 a, const float64 tolerance = ROUNDING_ERROR_f64)
		{
			return fabs(a) <= tolerance;
		}

		//! returns if a equals not zero, taking rounding errors into account
		inline bool isnotzero(const float64 a, const float64 tolerance = ROUNDING_ERROR_f64)
		{
			return fabs(a) > tolerance;
		}

		//! returns if a equals zero, taking rounding errors into account
		inline bool iszero(const float32 a, const float32 tolerance = ROUNDING_ERROR_f32)
		{
			return fabsf(a) <= tolerance;
		}

		//! returns if a equals not zero, taking rounding errors into account
		inline bool isnotzero(const float32 a, const float32 tolerance = ROUNDING_ERROR_f32)
		{
			return fabsf(a) > tolerance;
		}
		//////////////////////////////////////////////////////////////////////////

		//0-360度的sin值
		const static float32 g_sin[361] =
		{
			0.00000000f, 0.017452406f, 0.034899496f, 0.052335959f, 0.069756471f, 0.087155744f,
			0.10452846f, 0.12186935f, 0.13917311f, 0.15643448f, 0.17364819f, 0.19080900f,
			0.20791170f, 0.22495106f, 0.24192190f, 0.25881904f, 0.27563736f, 0.29237172f,
			0.30901700f, 0.32556814f, 0.34202015f, 0.35836795f, 0.37460658f, 0.39073116f,
			0.40673664f, 0.42261827f, 0.43837118f, 0.45399052f, 0.46947157f, 0.48480961f,
			0.50000000f, 0.51503813f, 0.52991927f, 0.54463905f, 0.55919296f, 0.57357645f,
			0.58778524f, 0.60181504f, 0.61566150f, 0.62932038f, 0.64278764f, 0.65605903f,
			0.66913062f, 0.68199837f, 0.69465840f, 0.70710677f, 0.71933985f, 0.73135370f,
			0.74314487f, 0.75470960f, 0.76604444f, 0.77714598f, 0.78801078f, 0.79863554f,
			0.80901700f, 0.81915206f, 0.82903755f, 0.83867061f, 0.84804809f, 0.85716730f,
			0.86602545f, 0.87461972f, 0.88294762f, 0.89100653f, 0.89879405f, 0.90630782f,
			0.91354549f, 0.92050487f, 0.92718387f, 0.93358046f, 0.93969262f, 0.94551855f,
			0.95105654f, 0.95630479f, 0.96126169f, 0.96592581f, 0.97029573f, 0.97437006f,
			0.97814763f, 0.98162717f, 0.98480779f, 0.98768836f, 0.99026805f, 0.99254614f,
			0.99452192f, 0.99619472f, 0.99756408f, 0.99862951f, 0.99939084f, 0.99984771f,
			1.0000000f, 0.99984771f, 0.99939084f, 0.99862951f, 0.99756408f, 0.99619472f,
			0.99452192f, 0.99254614f, 0.99026805f, 0.98768836f, 0.98480773f, 0.98162717f,
			0.97814757f, 0.97437006f, 0.97029573f, 0.96592581f, 0.96126169f, 0.95630473f,
			0.95105648f, 0.94551855f, 0.93969262f, 0.93358046f, 0.92718387f, 0.92050487f,
			0.91354543f, 0.90630776f, 0.89879405f, 0.89100647f, 0.88294756f, 0.87461960f,
			0.86602539f, 0.85716730f, 0.84804803f, 0.83867055f, 0.82903749f, 0.81915200f,
			0.80901700f, 0.79863548f, 0.78801078f, 0.77714586f, 0.76604444f, 0.75470948f,
			0.74314481f, 0.73135370f, 0.71933973f, 0.70710677f, 0.69465828f, 0.68199831f,
			0.66913044f, 0.65605897f, 0.64278764f, 0.62932026f, 0.61566144f, 0.60181487f,
			0.58778518f, 0.57357645f, 0.55919284f, 0.54463905f, 0.52991915f, 0.51503801f,
			0.50000006f, 0.48480955f, 0.46947157f, 0.45399037f, 0.43837112f, 0.42261809f,
			0.40673658f, 0.39073116f, 0.37460649f, 0.35836792f, 0.34202000f, 0.32556811f,
			0.30901679f, 0.29237160f, 0.27563736f, 0.25881892f, 0.24192186f, 0.22495088f,
			0.20791161f, 0.19080901f, 0.17364806f, 0.15643445f, 0.13917294f, 0.12186928f,
			0.10452849f, 0.087155640f, 0.069756471f, 0.052335810f, 0.034899451f, 0.017452220f,
			0.00000000f, -0.017452395f, -0.034899626f, -0.052335985f, -0.069756642f, -0.087155811f,
			-0.10452867f, -0.12186945f, -0.13917311f, -0.15643461f, -0.17364822f, -0.19080919f,
			-0.20791179f, -0.22495104f, -0.24192202f, -0.25881907f, -0.27563754f, -0.29237178f,
			-0.30901697f, -0.32556826f, -0.34202015f, -0.35836810f, -0.37460664f, -0.39073130f,
			-0.40673673f, -0.42261827f, -0.43837127f, -0.45399055f, -0.46947172f, -0.48480970f,
			-0.50000018f, -0.51503819f, -0.52991927f, -0.54463917f, -0.55919296f, -0.57357663f,
			-0.58778536f, -0.60181504f, -0.61566156f, -0.62932044f, -0.64278775f, -0.65605909f,
			-0.66913062f, -0.68199843f, -0.69465840f, -0.70710689f, -0.71933985f, -0.73135382f,
			-0.74314487f, -0.75470960f, -0.76604456f, -0.77714598f, -0.78801072f, -0.79863572f,
			-0.80901712f, -0.81915212f, -0.82903761f, -0.83867055f, -0.84804827f, -0.85716742f,
			-0.86602545f, -0.87461972f, -0.88294756f, -0.89100665f, -0.89879411f, -0.90630782f,
			-0.91354543f, -0.92050481f, -0.92718399f, -0.93358052f, -0.93969268f, -0.94551855f,
			-0.95105648f, -0.95630485f, -0.96126175f, -0.96592587f, -0.97029573f, -0.97437012f,
			-0.97814763f, -0.98162723f, -0.98480779f, -0.98768830f, -0.99026811f, -0.99254620f,
			-0.99452192f, -0.99619472f, -0.99756402f, -0.99862957f, -0.99939084f, -0.99984771f,
			-1.0000000f, -0.99984771f, -0.99939084f, -0.99862951f, -0.99756402f, -0.99619472f,
			-0.99452186f, -0.99254614f, -0.99026805f, -0.98768830f, -0.98480773f, -0.98162711f,
			-0.97814757f, -0.97437000f, -0.97029573f, -0.96592581f, -0.96126163f, -0.95630467f,
			-0.95105648f, -0.94551855f, -0.93969262f, -0.93358034f, -0.92718375f, -0.92050481f,
			-0.91354543f, -0.90630782f, -0.89879394f, -0.89100641f, -0.88294756f, -0.87461972f,
			-0.86602545f, -0.85716712f, -0.84804797f, -0.83867049f, -0.82903761f, -0.81915182f,
			-0.80901682f, -0.79863542f, -0.78801072f, -0.77714598f, -0.76604420f, -0.75470942f,
			-0.74314475f, -0.73135364f, -0.71933985f, -0.70710653f, -0.69465822f, -0.68199825f,
			-0.66913056f, -0.65605909f, -0.64278740f, -0.62932020f, -0.61566138f, -0.60181499f,
			-0.58778495f, -0.57357621f, -0.55919272f, -0.54463893f, -0.52991927f, -0.51503778f,
			-0.49999976f, -0.48480946f, -0.46947148f, -0.45399052f, -0.43837082f, -0.42261803f,
			-0.40673649f, -0.39073107f, -0.37460664f, -0.35836762f, -0.34201992f, -0.32556802f,
			-0.30901694f, -0.29237175f, -0.27563703f, -0.25881884f, -0.24192177f, -0.22495103f,
			-0.20791176f, -0.19080870f, -0.17364797f, -0.15643436f, -0.13917309f, -0.12186895f,
			-0.10452817f, -0.087155551f, -0.069756381f, -0.052335963f, -0.034899123f, -0.017452132f,
			0.00000000f
		};

		//0-360度的cos值
		const static float32 g_cos[361] =
		{
			1.0000000f, 0.99984771f, 0.99939084f, 0.99862951f, 0.99756408f, 0.99619472f,
			0.99452192f, 0.99254614f, 0.99026805f, 0.98768836f, 0.98480773f, 0.98162717f,
			0.97814763f, 0.97437006f, 0.97029573f, 0.96592581f, 0.96126169f, 0.95630473f,
			0.95105654f, 0.94551855f, 0.93969262f, 0.93358040f, 0.92718387f, 0.92050487f,
			0.91354543f, 0.90630776f, 0.89879405f, 0.89100653f, 0.88294756f, 0.87461972f,
			0.86602539f, 0.85716730f, 0.84804809f, 0.83867055f, 0.82903755f, 0.81915206f,
			0.80901700f, 0.79863548f, 0.78801078f, 0.77714592f, 0.76604444f, 0.75470960f,
			0.74314481f, 0.73135370f, 0.71933979f, 0.70710677f, 0.69465834f, 0.68199837f,
			0.66913056f, 0.65605897f, 0.64278764f, 0.62932038f, 0.61566144f, 0.60181504f,
			0.58778524f, 0.57357639f, 0.55919290f, 0.54463899f, 0.52991927f, 0.51503807f,
			0.49999997f, 0.48480958f, 0.46947151f, 0.45399052f, 0.43837115f, 0.42261824f,
			0.40673661f, 0.39073107f, 0.37460652f, 0.35836786f, 0.34202015f, 0.32556814f,
			0.30901697f, 0.29237166f, 0.27563727f, 0.25881907f, 0.24192190f, 0.22495104f,
			0.20791166f, 0.19080894f, 0.17364810f, 0.15643437f, 0.13917311f, 0.12186933f,
			0.10452842f, 0.087155685f, 0.069756396f, 0.052335974f, 0.034899496f, 0.017452383f,
			0.00000000f, -0.017452471f, -0.034899581f, -0.052336060f, -0.069756478f, -0.087155767f,
			-0.10452851f, -0.12186941f, -0.13917319f, -0.15643445f, -0.17364819f, -0.19080903f,
			-0.20791174f, -0.22495112f, -0.24192198f, -0.25881916f, -0.27563736f, -0.29237175f,
			-0.30901703f, -0.32556823f, -0.34202024f, -0.35836795f, -0.37460661f, -0.39073116f,
			-0.40673670f, -0.42261833f, -0.43837112f, -0.45399061f, -0.46947157f, -0.48480976f,
			-0.50000006f, -0.51503801f, -0.52991933f, -0.54463905f, -0.55919302f, -0.57357645f,
			-0.58778518f, -0.60181510f, -0.61566144f, -0.62932050f, -0.64278764f, -0.65605915f,
			-0.66913068f, -0.68199831f, -0.69465846f, -0.70710677f, -0.71933991f, -0.73135376f,
			-0.74314493f, -0.75470966f, -0.76604444f, -0.77714604f, -0.78801078f, -0.79863560f,
			-0.80901706f, -0.81915206f, -0.82903761f, -0.83867055f, -0.84804815f, -0.85716730f,
			-0.86602539f, -0.87461978f, -0.88294756f, -0.89100659f, -0.89879405f, -0.90630788f,
			-0.91354549f, -0.92050487f, -0.92718393f, -0.93358046f, -0.93969268f, -0.94551861f,
			-0.95105660f, -0.95630479f, -0.96126169f, -0.96592587f, -0.97029573f, -0.97437012f,
			-0.97814763f, -0.98162717f, -0.98480779f, -0.98768836f, -0.99026811f, -0.99254614f,
			-0.99452192f, -0.99619472f, -0.99756408f, -0.99862957f, -0.99939084f, -0.99984771f,
			-1.0000000f, -0.99984771f, -0.99939084f, -0.99862951f, -0.99756402f, -0.99619472f,
			-0.99452186f, -0.99254614f, -0.99026805f, -0.98768830f, -0.98480773f, -0.98162717f,
			-0.97814757f, -0.97437006f, -0.97029567f, -0.96592581f, -0.96126163f, -0.95630473f,
			-0.95105654f, -0.94551855f, -0.93969262f, -0.93358040f, -0.92718381f, -0.92050475f,
			-0.91354543f, -0.90630782f, -0.89879400f, -0.89100653f, -0.88294750f, -0.87461966f,
			-0.86602527f, -0.85716724f, -0.84804809f, -0.83867049f, -0.82903755f, -0.81915194f,
			-0.80901694f, -0.79863548f, -0.78801066f, -0.77714592f, -0.76604432f, -0.75470954f,
			-0.74314481f, -0.73135364f, -0.71933979f, -0.70710665f, -0.69465834f, -0.68199819f,
			-0.66913050f, -0.65605903f, -0.64278752f, -0.62932032f, -0.61566150f, -0.60181475f,
			-0.58778507f, -0.57357633f, -0.55919290f, -0.54463911f, -0.52991897f, -0.51503789f,
			-0.49999991f, -0.48480961f, -0.46947163f, -0.45399022f, -0.43837097f, -0.42261818f,
			-0.40673664f, -0.39073122f, -0.37460634f, -0.35836777f, -0.34202006f, -0.32556817f,
			-0.30901709f, -0.29237145f, -0.27563721f, -0.25881898f, -0.24192193f, -0.22495072f,
			-0.20791145f, -0.19080885f, -0.17364813f, -0.15643452f, -0.13917278f, -0.12186912f,
			-0.10452834f, -0.087155715f, -0.069756545f, -0.052335650f, -0.034899287f, -0.017452296f,
			0.00000000f, 0.017452320f, 0.034899786f, 0.052336149f, 0.069756567f, 0.087155737f,
			0.10452884f, 0.12186962f, 0.13917327f, 0.15643454f, 0.17364815f, 0.19080934f,
			0.20791194f, 0.22495121f, 0.24192195f, 0.25881901f, 0.27563769f, 0.29237193f,
			0.30901712f, 0.32556820f, 0.34202009f, 0.35836825f, 0.37460679f, 0.39073125f,
			0.40673667f, 0.42261818f, 0.43837142f, 0.45399067f, 0.46947166f, 0.48480964f,
			0.49999991f, 0.51503831f, 0.52991945f, 0.54463911f, 0.55919290f, 0.57357675f,
			0.58778548f, 0.60181516f, 0.61566150f, 0.62932038f, 0.64278787f, 0.65605921f,
			0.66913074f, 0.68199837f, 0.69465834f, 0.70710701f, 0.71933997f, 0.73135382f,
			0.74314487f, 0.75470954f, 0.76604462f, 0.77714610f, 0.78801084f, 0.79863554f,
			0.80901724f, 0.81915224f, 0.82903767f, 0.83867061f, 0.84804809f, 0.85716748f,
			0.86602557f, 0.87461978f, 0.88294762f, 0.89100653f, 0.89879423f, 0.90630788f,
			0.91354555f, 0.92050487f, 0.92718387f, 0.93358058f, 0.93969268f, 0.94551861f,
			0.95105654f, 0.95630473f, 0.96126181f, 0.96592587f, 0.97029579f, 0.97437006f,
			0.97814757f, 0.98162723f, 0.98480779f, 0.98768836f, 0.99026805f, 0.99254620f,
			0.99452192f, 0.99619472f, 0.99756408f, 0.99862951f, 0.99939084f, 0.99984771f,
			1.0000000f
		};

		//0-360度的tan值
		const static float32 g_tan[361] =
		{
			0.00000000f, 0.017455066f, 0.034920771f, 0.052407783f, 0.069926813f, 0.087488666f,
			0.10510424f, 0.12278456f, 0.14054084f, 0.15838444f, 0.17632699f, 0.19438031f,
			0.21255657f, 0.23086821f, 0.24932800f, 0.26794919f, 0.28674537f, 0.30573070f,
			0.32491970f, 0.34432760f, 0.36397025f, 0.38386405f, 0.40402624f, 0.42447484f,
			0.44522870f, 0.46630767f, 0.48773262f, 0.50952548f, 0.53170943f, 0.55430907f,
			0.57735026f, 0.60086066f, 0.62486935f, 0.64940763f, 0.67450857f, 0.70020753f,
			0.72654253f, 0.75355411f, 0.78128564f, 0.80978405f, 0.83909971f, 0.86928672f,
			0.90040410f, 0.93251514f, 0.96568877f, 1.0000000f, 1.0355304f, 1.0723687f,
			1.1106125f, 1.1503685f, 1.1917536f, 1.2348973f, 1.2799418f, 1.3270448f,
			1.3763820f, 1.4281482f, 1.4825610f, 1.5398650f, 1.6003345f, 1.6642795f,
			1.7320509f, 1.8040479f, 1.8807268f, 1.9626104f, 2.0503037f, 2.1445069f,
			2.2460370f, 2.3558526f, 2.4750874f, 2.6050899f, 2.7474773f, 2.9042110f,
			3.0776839f, 3.2708533f, 3.4874156f, 3.7320504f, 4.0107808f, 4.3314762f,
			4.7046309f, 5.1445556f, 5.6712842f, 6.3137555f, 7.1153698f, 8.1443481f,
			9.5143681f, 11.430060f, 14.300683f, 19.081131f, 28.636255f, 57.290039f,
			3.4028234e+038f, -57.289753f, -28.636185f, -19.081099f, -14.300665f, -11.430049f,
			-9.5143604f, -8.1443415f, -7.1153650f, -6.3137522f, -5.6712813f, -5.1445532f,
			-4.7046289f, -4.3314743f, -4.0107794f, -3.7320492f, -3.4874144f, -3.2708523f,
			-3.0776830f, -2.9042101f, -2.7474766f, -2.6050892f, -2.4750867f, -2.3558521f,
			-2.2460365f, -2.1445065f, -2.0503039f, -1.9626099f, -1.8807263f, -1.8040471f,
			-1.7320505f, -1.6642796f, -1.6003342f, -1.5398650f, -1.4825605f, -1.4281479f,
			-1.3763821f, -1.3270446f, -1.2799417f, -1.2348969f, -1.1917535f, -1.1503680f,
			-1.1106124f, -1.0723687f, -1.0355301f, -1.0000000f, -0.96568847f, -0.93251503f,
			-0.90040368f, -0.86928660f, -0.83909965f, -0.80978382f, -0.78128558f, -0.75355381f,
			-0.72654241f, -0.70020759f, -0.67450833f, -0.64940757f, -0.62486917f, -0.60086054f,
			-0.57735032f, -0.55430895f, -0.53170943f, -0.50952530f, -0.48773256f, -0.46630743f,
			-0.44522861f, -0.42447484f, -0.40402609f, -0.38386402f, -0.36397007f, -0.34432754f,
			-0.32491949f, -0.30573058f, -0.28674540f, -0.26794904f, -0.24932796f, -0.23086800f,
			-0.21255648f, -0.19438033f, -0.17632686f, -0.15838441f, -0.14054067f, -0.12278450f,
			-0.10510427f, -0.087488554f, -0.069926806f, -0.052407634f, -0.034920722f, -0.017454879f,
			0.00000000f, 0.017455053f, 0.034920897f, 0.052407809f, 0.069926985f, 0.087488733f,
			0.10510445f, 0.12278467f, 0.14054085f, 0.15838459f, 0.17632703f, 0.19438051f,
			0.21255666f, 0.23086819f, 0.24932815f, 0.26794922f, 0.28674558f, 0.30573076f,
			0.32491967f, 0.34432775f, 0.36397025f, 0.38386422f, 0.40402630f, 0.42447504f,
			0.44522882f, 0.46630767f, 0.48773277f, 0.50952548f, 0.53170967f, 0.55430913f,
			0.57735056f, 0.60086077f, 0.62486941f, 0.64940780f, 0.67450863f, 0.70020783f,
			0.72654271f, 0.75355405f, 0.78128588f, 0.80978411f, 0.83909994f, 0.86928689f,
			0.90040404f, 0.93251532f, 0.96568882f, 1.0000004f, 1.0355304f, 1.0723692f,
			1.1106128f, 1.1503685f, 1.1917540f, 1.2348973f, 1.2799416f, 1.3270457f,
			1.3763826f, 1.4281484f, 1.4825611f, 1.5398648f, 1.6003356f, 1.6642803f,
			1.7320513f, 1.8040478f, 1.8807261f, 1.9626119f, 2.0503049f, 2.1445074f,
			2.2460368f, 2.3558517f, 2.4750888f, 2.6050904f, 2.7474780f, 2.9042108f,
			3.0776823f, 3.2708557f, 3.4874165f, 3.7320518f, 4.0107803f, 4.3314829f,
			4.7046356f, 5.1445580f, 5.6712832f, 6.3137493f, 7.1153865f, 8.1443615f,
			9.5143766f, 11.430057f, 14.300652f, 19.081249f, 28.636425f, 57.290325f,
			3.4028234e+038f, -57.290249f, -28.636015f, -19.081066f, -14.300647f, -11.430053f,
			-9.5143299f, -8.1443281f, -7.1153607f, -6.3137484f, -5.6712828f, -5.1445441f,
			-4.7046242f, -4.3314729f, -4.0107799f, -3.7320514f, -3.4874101f, -3.2708499f,
			-3.0776820f, -2.9042106f, -2.7474780f, -2.6050866f, -2.4750853f, -2.3558517f,
			-2.2460365f, -2.1445074f, -2.0503023f, -1.9626095f, -1.8807260f, -1.8040477f,
			-1.7320511f, -1.6642784f, -1.6003338f, -1.5398647f, -1.4825610f, -1.4281468f,
			-1.3763812f, -1.3270444f, -1.2799414f, -1.2348973f, -1.1917528f, -1.1503679f,
			-1.1106122f, -1.0723686f, -1.0355304f, -0.99999934f, -0.96568835f, -0.93251485f,
			-0.90040398f, -0.86928684f, -0.83909911f, -0.80978370f, -0.78128546f, -0.75355405f,
			-0.72654194f, -0.70020711f, -0.67450821f, -0.64940745f, -0.62486935f, -0.60086012f,
			-0.57734990f, -0.55430883f, -0.53170931f, -0.50952548f, -0.48773214f, -0.46630734f,
			-0.44522849f, -0.42447475f, -0.40402627f, -0.38386363f, -0.36396995f, -0.34432745f,
			-0.32491964f, -0.30573073f, -0.28674504f, -0.26794896f, -0.24932787f, -0.23086816f,
			-0.21255663f, -0.19437999f, -0.17632677f, -0.15838432f, -0.14054082f, -0.12278417f,
			-0.10510394f, -0.087488472f, -0.069926716f, -0.052407786f, -0.034920398f, -0.017454792f,
			0.00000000f
		};
	}
}