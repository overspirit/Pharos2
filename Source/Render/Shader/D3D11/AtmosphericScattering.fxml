<?xml version="1.0" encoding="utf-8"?>
<effect>
  <include file="Lighting.fxml"/>
  <include file="Util.fxml"/>
  
  <variable type="SamplerState" name="linear_sampler" bind="s0"/>  
  <variable type="Texture2D" name="earth_day_tex" bind="t0"/>
  <variable type="Texture2D" name="earth_night_tex" bind="t1"/>
  <variable type="Texture2D" name="ocean_mask_tex" bind="t2"/>
  
  <constant name="cbPerScene" bind="b0">
    
    <member type="row_major matrix" name="g_view" bind="c0"/>
    <member type="row_major matrix" name="g_proj" bind="c4"/>

    <member type="float3" name="eye_pos" bind="c8"/>
    <member type="float3" name="look_at_vec" bind="c9"/>   
    
  </constant>

  <constant name="cbPerModel" bind="b1">
    
    <member type="row_major matrix" name="g_world" bind="c0"/>
    
  </constant>

  <constant name="cbPerFrame" bind="b2">
    
    <member type="float" name="planet_radius" bind="c0"/>
    <member type="float" name="atmosphere_top" bind="c1"/>
    <member type="float" name="density" bind="c2"/>
    
    <member type="float3" name="beta" bind="c3"/>
    <member type="float3" name="absorb" bind="c4"/>

    <member type="float3" name="light_dir" bind="c5"/>
    
  </constant>

  <macro name="LN2" value="0.693147181"/>
  <macro name="H50" value="(density * LN2)"/>
  <macro name="BETA50" value="(beta * LN2)"/>
  <macro name="INV_H50" value="(1 / H50)"/>
  <macro name="X50" value="(planet_radius / H50)"/>

  <shader>
    <![CDATA[
    
float Chapman(float X, float h, float cos_chi)
{
	// this is the approximate Chapman function,
	// corrected for transitive consistency 

	float c = sqrt(X + h);
	float c_exp_h = c * exp2(-h);
	if (cos_chi >= 0)
	{
		return c_exp_h / (c * cos_chi + 1);
	}
	else
	{
		float x0 = sqrt(1 - cos_chi * cos_chi) * (X + h);
		float c0 = sqrt(x0);
		return 2 * c0 * exp2(X - x0) - c_exp_h / (1 - c * cos_chi);
	}
}

float3 Transmittance(float3 r, float3 view_dir)
{
	// a quick function to get the transmittance
	// looking from point p into infinity

	float x = length(r) * INV_H50;
	float h = x - X50;
	float cos_chi = dot(normalize(r), view_dir);

	return exp2(-BETA50 * H50 * Chapman(X50, h, cos_chi));
}

void AerialPerspective(float3 r0, float3 r1, bool infinite,
		out float3 result_t, out float3 result_s)
{
	// compute the full aerial perspective
	// from point r0 to point r1, 
	// all positions relative to the planet center
	// if the infinite flag is true, the ray is followed beyond r1 into open space

	result_t = 1;
	result_s = 0;

	// get the principal integration bounds
	// as the intersection of the viewing ray
	// with the atmosphere boundary
	// t0 = start, t1 = end

	float t0 = 0;
	float t1 = 0;
	float3 dr = r1 - r0;
	float3 drn = normalize(dr);

	{
		float dp = dot(r0, drn);
		float r0sq = dot(r0, r0);
		float top2 = atmosphere_top * atmosphere_top;
		float D = dp * dp - r0sq + top2;

		if (D >= 0)
		{
			float sd = sqrt(D);
			t0 = max(0, -dp - sd);
			t1 = -dp + sd;
		}
		else
		{
			return;
		}
	}

	// the infinite flag means the viewing ray extends
	// beyond the point of x1 (into space)
	// otherwise it ends at x1 (onto ground)

	float inf_neg = 1;
	if (!infinite)
	{
		float len_dr = length(dr);
		t0 = min(t0, len_dr);
		t1 = min(t1, len_dr);
		inf_neg = -1;
	}

	// initialization of
	// the integration loop variables

//#if KLAYGE_SHADER_MODEL >= SHADER_MODEL(3, 0)
	const int NMAX = 8;
//#else
	//const int NMAX = 4;
//#endif
	int N = NMAX;
	float range = t1 - t0;
	float dt = range / (N - 1);

	float last_amtl = 0;
	float last_mray = 0;
	{
		float3 r = r0 + drn * t1;
		float rl = length(r);
		float x = rl * INV_H50;
		float h = x - X50;
		r /= rl;
		float cos_chi_sun = dot(r, light_dir);
		float cos_chi_ray = dot(r, inf_neg * drn);

		last_amtl = H50 * Chapman(X50, h, cos_chi_sun);
		last_mray = inf_neg * H50 * Chapman(X50, h, cos_chi_ray);
	}

	float cos_theta = dot(drn, light_dir);
	float phase = 3.0f / 4 * (1 + cos_theta * cos_theta);

	// main loop
	// integrate along the ray in reverse order
	// (back to front)

	for (int i = N - 1; i > 0; -- i)
	{
		// calculate altitude r along the ray
		float t = i * dt + t0;
		float3 r = r0 + drn * t;
		float rl = length(r);
		r /= rl;

		// normalize altitude to 50%-height
		float x = rl * INV_H50;
		float h = x - X50;

		// calculate local incidence angle with the sunlight
		float cos_chi_sun = dot(r, light_dir);
		float cos_chi_ray = dot(r, inf_neg * drn);

		// calculate the airmass along this segment of the ray
		float mray = inf_neg * H50 * Chapman(X50, h, cos_chi_ray);
		float msegment = mray - last_mray;

		// calculate inscatter for this segment
		// amtl = airmass to light
		// for simplicity, the sun irradiance is assumed to be 1
		// so this is just the transmittance towards the sun, Tsun
		// for a Rayleigh atmosphere
		float amtl = H50 * Chapman(X50, h, cos_chi_sun);
		float3 segment_s = phase * exp2(-BETA50 * (amtl + last_amtl) * 0.5f);

		// calculate the transmittance for this segment
		float3 segment_t = exp2(-BETA50 * msegment);
		
		// propagate the integration
		// previous inscatter is attenuated by current transmittance, plus the new inscatter
		// previous transmittance is attenuated by current transmittance
		result_s = lerp(segment_s, result_s, segment_t);
		result_t = result_t * segment_t;

		// keep these variables for the next iteration
		last_amtl = amtl;
		last_mray = mray;
	}

	// Factored the average absorbtion color out of the loop
	// This would not be possible with different absorbtion colors at different scale heights
	result_s *= absorb;
}
    ]]>
  </shader>

  <shader>
    <![CDATA[
void PlanetVS(float4 pos		: POSITION,
					float2 tex				: TEXCOORD0,
					out float2 oTex			: TEXCOORD0,
					out float3 oPosOS		: TEXCOORD1,
					out float3 oViewDir		: TEXCOORD2,
					out float4 oPos			: SV_Position)
{
	oTex = tex;
	oPosOS = pos.xyz;
	oPos = mul(float4(oPosOS, pos.w), mul(g_world, mul(g_view, g_proj)));
	oViewDir = eye_pos - oPosOS;
}

float4 PlanetPS(float2 tex : TEXCOORD0, float3 pos_os : TEXCOORD1, float3 view_dir : TEXCOORD2) : SV_Target
{ 
	float3 color = 0;
	view_dir = normalize(view_dir);	
	pos_os = normalize(pos_os);

	float3 normal = pos_os;

	float3 day_color = earth_day_tex.Sample(linear_sampler, tex).xyz;
	float3 night_color = earth_night_tex.Sample(linear_sampler, tex).xyz;

	// get the direct light color
	// from the transmittance of the sun through the atmosphere
	float3 light_color = Transmittance(pos_os, light_dir);

	// for shading the landmass we use the Lommel-Seeliger law
	float dot_nv = max(0, dot(normal, view_dir));
	float dot_nl = max(0, dot(normal, light_dir));
	float3 land_color = light_color * day_color * dot_nl / (dot_nl + dot_nv) + pow(1 - dot_nl, 8) * night_color;

	// for shading the ocean 
	// we obtain the skycolor reflection
	// via the aerial perspective of the reflection vector,
	// and mix it with an approximate fresnel factor
	float3 t, s;
	AerialPerspective(pos_os, pos_os - reflect(view_dir, normal), true, t, s);
	float fresnel = FresnelTerm(view_dir, normal, 0.04f).x;
	float3 ocean_color = lerp(land_color, s, fresnel);

	// we also add the specular reflection of the sun to the ocean
	// uses the micro-facet shading model described in ShaderX7 
	float3 halfway = normalize(light_dir + view_dir);
	float dot_lh = max(0, dot(light_dir, halfway));
	ocean_color += light_color * SpecularTerm(0.04f, light_dir, halfway, normal, 32) / pow(dot_lh, 3) * dot_nl;

	// final shaded surface color
	float3 surface_color = lerp(land_color, ocean_color, ocean_mask_tex.Sample(linear_sampler, tex).x);

	// finally obtain the aerial perspective of the shaded surface point
	// from the camera's point of view
	AerialPerspective(eye_pos, pos_os, false, t, s);
	color = s + t * surface_color;

	return float4(max(color, 0), 1);
}


void AtmosphereVS(float4 pos		: POSITION,
					float2 tex				: TEXCOORD0,
					out float2 oTex			: TEXCOORD0,
					out float3 oPosOS		: TEXCOORD1,
					out float3 oViewDir		: TEXCOORD2,
					out float4 oPos			: SV_Position)
{
	oTex = tex;
	oPosOS = pos.xyz * atmosphere_top;
	oPos = mul(float4(oPosOS, pos.w), mul(g_world, mul(g_view, g_proj)));
	oViewDir = oPosOS - eye_pos;
}

float4 AtmospherePS(float2 tex : TEXCOORD0, float3 pos_os : TEXCOORD1, float3 view_dir : TEXCOORD2) : SV_Target
{
	float3 color = 0;
	view_dir = normalize(view_dir);

	// there was no surface intersection
	// this is simply the aerial perspective of empty space
	float3 t, s;
	AerialPerspective(eye_pos, eye_pos + view_dir, true, t, s);
	color = s;
	
	return float4(max(color, 0), 1);
}
        ]]>
  </shader>

  <technique name="AtmosphereTech">
    <pass name="p0">
      <param name="cull_mode" value="none"/>
      <!--<param name="fill_mode" value="wireframe"/>-->

      <param name="vertex_shader" value="AtmosphereVS"/>
      <param name="pixel_shader" value="AtmospherePS"/>
    </pass>
  </technique>

  <technique name="PlanetTech">
    <pass name="p0">
      <param name="cull_mode" value="none"/>
      <!--<param name="fill_mode" value="wireframe"/>-->

      <param name="blend_enable" value="true"/>
      <param name="src_blend" value="src_alpha"/>
      <param name="dest_blend" value="inv_src_alpha"/>
      <param name="src_blend_alpha" value="src_alpha"/>
      <param name="dest_blend_alpha" value="inv_src_alpha"/>

      <param name="depth_func" value="less_equal"/>

      <param name="vertex_shader" value="PlanetVS"/>
      <param name="pixel_shader" value="PlanetPS"/>
    </pass>
  </technique>

</effect>