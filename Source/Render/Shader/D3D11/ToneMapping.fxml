<?xml version="1.0" encoding="utf-8"?>
<effect>
  <shader>
    <![CDATA[
float EyeAdaption(float lum)
{
	return lerp(0.2f, lum, 0.5f);
}

float3 F(float3 x)
{
	const float A = 0.22f;
	const float B = 0.30f;
	const float C = 0.10f;
	const float D = 0.20f;
	const float E = 0.01f;
	const float F = 0.30f;

	return ((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F;
}

float3 ToneMapping(float3 color, float3 blur, float adapted_lum)
{
	const float3 BLUE_SHIFT = float3(0.4f, 0.4f, 0.7f);

	color += blur * 0.25f;
	
	float lum = dot(color, RGB_TO_LUM);
	
	// martin's modified blue shift
	color = lerp(lum * BLUE_SHIFT, color, saturate(16.0f * lum));

#if KLAYGE_NO_FP_COLOR
	return color;
#else
	float adapted_lum_dest = 3 / (max(0.1f, 1 + 10 * EyeAdaption(adapted_lum)));

	// Filmic Tonemapping from Unchart 2
	const float White = 11.2f;
	return F(1.6f * adapted_lum_dest * color) / F(White);
#endif
}

void ToneMappingVS(float4 pos : POSITION,
					out float3 oTex : TEXCOORD0,
					out float4 oPos : SV_Position)
{
	oPos = pos;

	oTex.xy = TexCoordFromPos(pos);
  
	float adapted_lum = lum_tex.SampleLevel(point_sampler, 0.5f.xx, 0);
  
	oTex.z = max(0.001f, adapted_lum);
}

float4 ToneMappingPS(float3 iTex : TEXCOORD0) : SV_Target
{
	// For FXAA
	float3 ldr_rgb = saturate(ToneMapping(src_tex.Sample(linear_sampler, iTex.xy).rgb, bloom_tex.Sample(linear_sampler, iTex.xy).rgb, iTex.z));
	return float4(ldr_rgb, dot(ldr_rgb, RGB_TO_LUM));
}
		]]>
  </shader>
</effect>