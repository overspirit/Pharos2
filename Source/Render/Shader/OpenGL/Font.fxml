<?xml version="1.0" encoding="utf-8"?>
<effect>
    
    <uniform type="sampler2D" name="g_tex" bind="0"/>
    
    <attribute type="highp vec4" name="pos" semantic="POSITION0"/>
    <attribute type="highp vec2" name="tex" semantic="TEXCOORD0"/>
    
    <varying type="highp vec4" name="oPos"/>
    <varying type="highp vec2" name="oTex"/>
    
    <target type="highp vec4" name="fragColor" bind="0"/>
    
    <block name="distance_base_scale" bind="0" size="16">
        <member type="highp float" name="g_base"/>
        <member type="highp float" name="g_scale"/>
        <member type="highp float" name="g_outline_scale"/>
    </block>
    
    <block name="font_color" bind="1" size="32">
        <member type="highp vec4" name="g_font_color"/>
        <member type="highp vec4" name="g_outline_color"/>
    </block>
    
    <block name="shadow_offset" bind="2" size="16">
        <member type="highp vec2" name="g_shadow_offset"/>
    </block>
    
    <shader type="vertex_shader" name="FontVS">
        <![CDATA[
            void main()
            {
                oPos = pos;
                oTex.x = tex.x;
                oTex.y = tex.y;
                
                gl_Position = oPos;
            }
        ]]>
    </shader>
    
    <shader type="vertex_shader" name="FontShadowVS">
        <![CDATA[
            void main()
            {
                oPos = pos;
                oPos.xy += g_shadow_offset;
                oTex.x = tex.x;
                oTex.y = tex.y;
            
                gl_Position = oPos;
            }
        ]]>
    </shader>
    
    <shader type="pixel_shader" name="FontPS">
        <![CDATA[
            void main()
            {
                highp float a = texture(g_tex, oTex).a;
                fragColor = vec4(g_font_color.xyz, a * g_scale + g_base);
                //fragColor = vec4(a, 0, 0, 1.0);
            }
        ]]>
    </shader>
    
    <shader type="pixel_shader" name="FontOutlinePS">
        <![CDATA[
            void main()
            {
                highp float a = texture(g_tex, oTex).a;
                highp float outline_scale = g_scale + g_outline_scale;
                highp vec4 finalColor = g_font_color;
                if(a < (-g_base / g_scale) && a > (-g_base / outline_scale)) finalColor = g_outline_color;
                fragColor = vec4(finalColor.xyz, a * outline_scale + g_base);
            }
        ]]>
    </shader>
    
    <technique name="Font">
        <pass name="p0">
            <!--<param name="alpha_to_coverage_enable" value="true"/>-->
            <param name="blend_enable" value="true"/>
            <param name="src_blend" value="src_alpha"/>
            <param name="dest_blend" value="inv_src_alpha"/>
            <param name="src_blend_alpha" value="src_alpha"/>
            <param name="dest_blend_alpha" value="inv_src_alpha"/>
            
            <param name="depth_func" value="less_equal"/>
            
            <param name="vertex_shader" value="FontVS"/>
            <param name="pixel_shader" value="FontPS"/>
        </pass>
    </technique>
    
    <technique name="FontShadow">
        <pass name="p0">
            <!--<param name="alpha_to_coverage_enable" value="true"/>-->
            <param name="blend_enable" value="true"/>
            <param name="src_blend" value="src_alpha"/>
            <param name="dest_blend" value="inv_src_alpha"/>
            <param name="src_blend_alpha" value="src_alpha"/>
            <param name="dest_blend_alpha" value="inv_src_alpha"/>
            
            <param name="depth_func" value="less_equal"/>
            
            <param name="vertex_shader" value="FontShadowVS"/>
            <param name="pixel_shader" value="FontPS"/>
        </pass>
    </technique>
    
    <technique name="FontOutline">
        <pass name="p0">
            <!--<param name="alpha_to_coverage_enable" value="true"/>-->
            <param name="blend_enable" value="true"/>
            <param name="src_blend" value="src_alpha"/>
            <param name="dest_blend" value="inv_src_alpha"/>
            <param name="src_blend_alpha" value="src_alpha"/>
            <param name="dest_blend_alpha" value="inv_src_alpha"/>
            
            <param name="depth_func" value="less_equal"/>
            
            <param name="vertex_shader" value="FontVS"/>
            <param name="pixel_shader" value="FontOutlinePS"/>
        </pass>
    </technique>
    
</effect>
